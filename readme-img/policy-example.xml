<!--
    IMPORTANT:
    - Policy elements can appear only within the <inbound>, <outbound>, <backend> section elements.
    - To apply a policy to the incoming request (before it is forwarded to the backend service), place a corresponding policy element within the <inbound> section element.
    - To apply a policy to the outgoing response (before it is sent back to the caller), place a corresponding policy element within the <outbound> section element.
    - To add a policy, place the cursor at the desired insertion point and select a policy from the sidebar.
    - To remove a policy, delete the corresponding policy statement from the policy document.
    - Position the <base> element within a section element to inherit all policies from the corresponding section element in the enclosing scope.
    - Remove the <base> element to prevent inheriting policies from the corresponding section element in the enclosing scope.
    - Policies are applied in the order of their appearance, from the top down.
    - Comments within policy elements are not supported and may disappear. Place your comments between policy elements or at a higher level scope.
-->
<policies>
    <inbound>
        <base />
        <validate-jwt header-name="Authorization" failed-validation-httpcode="401" failed-validation-error-message="Unauthorized. Access token is missing or invalid.">
            <openid-config url="https://login.microsoftonline.com/{aad-tenant}/v2.0/.well-known/openid-configuration" />
            <audiences>
                <audience>{audience-value - (ex: guid)}</audience>
            </audiences>
            <issuers>
                <issuer>{issuer-value - (ex: https://login.microsoftonline.com/{tenant id}/v2.0)}</issuer>
            </issuers>
        </validate-jwt>
        <set-header name="api-key" exists-action="append">
            <value>{{azure-openai-key}}</value>
        </set-header>
        <set-variable name="prin_name" value="@{
            Jwt jwt;
            context.Request.Headers.GetValueOrDefault("Authorization","scheme param").Split(' ').Last().TryParseJwt(out jwt);
            //return jwt.Claims.GetValueOrDefault("name", "?");
            return jwt.Claims.GetValueOrDefault("preferred_username", "?");
        }" />
        <set-header name="Authorization" exists-action="delete" />
        <cors allow-credentials="false">
            <allowed-origins>
                <origin>*</origin>
            </allowed-origins>
            <allowed-methods preflight-result-max-age="300">
                <method>GET</method>
                <method>POST</method>
                <method>OPTIONS</method>
                <method>PUT</method>
                <method>PATCH</method>
            </allowed-methods>
            <allowed-headers>
                <header>*</header>
            </allowed-headers>
            <expose-headers>
                <header>*</header>
            </expose-headers>
        </cors>
    </inbound>
    <backend>
        <base />
    </backend>
    <outbound>
        <choose>
            <when condition="@(context.Response.StatusCode == 200)">
                <log-to-eventhub logger-id="jhl-apim-logger">@{
                    var responseBody = context.Response.Body?.As<JObject>(true);
                    return new JObject(
                        new JProperty("apim-request-id", context.Response.Headers.GetValueOrDefault("apim-request-id",string.Empty)),
                        new JProperty("app-key", context.Response.Headers.GetValueOrDefault("Ocp-Apim-Subscription-Key",string.Empty)),
                        new JProperty("timestamp", DateTime.UtcNow.ToString()),
                        new JProperty("api-operation", responseBody["object"].ToString()),
                        new JProperty("prompt-tokens", responseBody["usage"]["prompt_tokens"].ToString()),
                        new JProperty("completion-tokens", responseBody["usage"]["completion_tokens"].ToString()),                   
                        new JProperty("total-tokens", responseBody["usage"]["total_tokens"].ToString()),
                        new JProperty("principal-name", context.Variables["prin_name"]) // Add this line to include prin_name
                    ).ToString();
                }</log-to-eventhub>
            </when>
        </choose>
        <base />
    </outbound>
    <on-error>
        <base />
    </on-error>
</policies>